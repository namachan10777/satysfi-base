@import: zrbase/zp0
@import: eq
@import: ord
@import: int
@import: bool

module Float : sig
  val inf : float
  val ninf : float
  val nan : float

  val is-zero : float -> bool
  val is-inf : float -> bool
  val is-nan : float -> bool
  val is-subnormal : float -> bool
  val is-normal : float -> bool
  val signbit : float -> bool
  val ldexp : int -> float -> float
  val frexp : float -> float * int

  val (<) : float -> float -> bool
  val (>) : float -> float -> bool
  val (>=) : float -> float -> bool
  val (<=) : float -> float -> bool
  val (==) : float -> float -> bool  % ieee754-compliant comparison

  % only defined for non-nan values
  val ord : (float Ord.t) implicit
  val eq : (float Eq.t) implicit

  val equal : float -> float -> bool

  val neg : float -> float
  val abs : float -> float
  val min : float -> float -> float
  val max : float -> float -> float
  val min-value : float % == neg-inf
  val max-value : float % == inf
  val pow : float -> float -> float

  val of-int : int -> float
  val to-int : float -> int

  val ceil : float -> float
  val floor : float -> float
  val round : float -> float
  val truncate : float -> float

  val sin : float -> float
  val cos : float -> float
  val tan : float -> float
  val asin : float -> float
  val acos : float -> float
  val atan : float -> float
  val atan2 : float -> float -> float
  val sqrt : float -> float
  val exp : float -> float
  val log : float -> float
  val log10 : float -> float

  val pi : float
end = struct
  let neg f = (0.0 -. 1.0) *. f % `0.0 -. f` does not work properly when f == 0.0

  let nan = 0.0 /. 0.0
  let inf = 1.0 /. 0.0
  let ninf = neg inf

  let to-length f = 1pt *' f % never introduces inexactness

  let exp2i i =
    if i < -1074 then
      0.0
    else if i > 1023 then
      inf
    else
      % binary method
      let-rec aux i e acc =
        if i == 0 then
          acc
        else
          aux (i / 2) (e *. e) (if i mod 2 == 1 then acc *. e else acc) in
      if i >= 0 then
        aux i 2.0 1.0
      else
        aux (-i) 0.5 1.0

  let (<) f g = to-length f <' to-length g
  let (>) f g = g < f

  let abs f = if f < 0.0 then neg f else f

  let is-zero-or-nan f = not (f < neg f || f > neg f)
  let is-nan f = is-zero-or-nan f && is-zero-or-nan (f +. 1.0)
  let is-zero f = is-zero-or-nan f && not (is-nan f)
  let is-inf f = not (is-nan f) && is-nan (f -. f)
  let (==) f g =
    if is-nan f || is-nan g then
      false
    else if is-inf f || is-inf g then
      (is-inf f && is-inf g && f *. g > 0.0)
    else
      is-zero (f -. g)
  let (<=) f g = f < g || f == g
  let (>=) f g = g <= f
  let is-finite f = not (is-nan f || is-inf f)
  let min-normal = exp2i(-1022)
  let is-subnormal f = is-finite f && not (is-zero f) && f < min-normal
  let is-normal f = is-finite f && not (is-zero f) && f >= min-normal

  let ord = Ord.make (fun a b -> (if a < b then Lt else if a > b then Gt else Eq))
  let eq = Ord.derive-eq ord

  let equal = Eq.equal eq

  let min f g = if is-nan f || is-nan g then nan else if f < g then f else g
  let max f g = if is-nan f || is-nan g then nan else if f > g then f else g

  let min-value = ninf
  let max-value = inf

  let of-int = float
  let to-int = round

  let signbit f =
    if is-nan f then
      false
    else if is-zero f then
      (1.0 /. f) < 0.0
    else
      (f < 0.0)

  let get-exp f =
    if not (is-finite f) then
      1023
    else if is-zero f || is-subnormal f then
      0
    else
      let f = abs f in
      let-rec aux k acc =
        if Int.(k == 0) then
          acc + 1023
        else
          let m = 2 |> Int.pow (k - 1) in
          if f >= exp2i (acc + m) then
            aux (k - 1) (acc + m)
          else
            aux (k - 1) acc
      in aux 11 (-1023)

  let-rec frexp f = % never invokes rounding
    if is-nan f || is-inf f then
      (f, 1023)
    else if is-zero f then
      (f, 0)
    else if f < 0.0 then
      let (f, exp) = frexp (neg f) in
      (neg f, exp)
    else if is-subnormal f then
      let-rec aux f e = % adjust subnormal numbers
        if f >= 0.5 then
          (f, e)
        else
          aux (f *. 2.0) (e - 1)
      in
      aux f 0
    else
      let exp = get-exp f - 1023 in
      (f *. exp2i (- exp), exp)

  let-rec ldexp exp f =
    open Int in
    if is-nan f || is-inf f || is-zero f || exp == 0 then
      f
    else if exp >= 0 then
      if exp <= 1023 then
        f *. exp2i exp
      else
        ldexp (exp - 1023) (f *. exp2i 1023)
    else
      if exp >= -1074 then
        f *. exp2i exp
      else
        let (f, e) = frexp f in
        f *. exp2i (e + exp)

  let-rec truncate f =
    if not (is-finite f) then
      f
    else if is-zero f then
      f
    else
      let (g, e) = frexp f in
      if Int.(e >= 52) then
        f
      else
        of-int (to-int (g |> ldexp e))

  let-rec round f =
    if not (is-finite f) then
      f
    else if is-zero f then
      f
    else
      let (g, e) = frexp f in
      if Int.(e >= 52) then
        f
      else
        let h = of-int (to-int (g |> ldexp e)) in
        if f > 0.0 then
          if (f -. h) >= 0.5 then
            h +. 1.0
          else
            h
        else
          if (h -. f) > 0.5 then
            h -. 1.0
          else
            h

  let ceil f =
    if not (is-finite f) then
      f
    else if is-zero f then
      f
    else if f < 0.0 then
      truncate f
    else
      let g = truncate f in
      if g == f then
        g
      else
        g +. 1.0

  let floor f =
    if not (is-finite f) then
      f
    else if is-zero f then
      f
    else if f > 0.0 then
      truncate f
    else
      let g = truncate f in
      if g == f then
        g
      else
        g -. 1.0

  let sin = sin
  let cos = cos
  let tan = tan
  let asin = asin
  let acos = acos
  let atan = atan
  let atan2 = atan2
  let exp = ZP0.exp
  let log = ZP0.log
  let log10 f = log f /. log 10.0
  let pow y x = exp (y *. log x) % x^y == (x |> pow y)
  let sqrt = pow 0.5

  let pi = atan2 0.0 (neg 1.0)
end